#!/usr/bin/env python3
"""
convert2ebook.py

Script Python pour convertir un ou plusieurs fichiers ODT en PDF et/ou ePub
en utilisant Pandoc (avec pypandoc). La g√©n√©ration PDF est optimis√©e si un
moteur LaTeX moderne comme XeLaTeX est install√©.

Python script to convert one or multiple ODT files to PDF and/or ePub
using Pandoc (via pypandoc). PDF generation is optimized if a modern LaTeX
engine like XeLaTeX is installed.

Toutes les sorties console sont affich√©es en fran√ßais et en anglais.
All console outputs are displayed in French and English.
"""

import sys
import os
import shutil

# Variable globale pour stocker le moteur PDF √† utiliser
PDF_ENGINE = None

def msg(fr, en):
    return f"{fr} / {en}"

try:
    import pypandoc
except ImportError:
    print(msg("‚ùå Le module 'pypandoc' n'est pas install√©.",
              "‚ùå The 'pypandoc' module is not installed."))
    print(msg("üëâ Installe-le avec : pip install pypandoc",
              "üëâ Install with: pip install pypandoc"))
    sys.exit(1)

def check_dependencies():
    global PDF_ENGINE
    if not shutil.which("pandoc"):
        print(msg("‚ùå Pandoc n'est pas install√© ou introuvable dans le PATH.",
                  "‚ùå Pandoc is not installed or not in PATH."))
        print(msg("üëâ Installe-le ici : https://pandoc.org/installing.html",
                  "üëâ Install here: https://pandoc.org/installing.html"))
        sys.exit(1)
    else:
        print(msg("‚úÖ Pandoc d√©tect√©", "‚úÖ Pandoc detected"))

    # D√©tection du moteur LaTeX, priorit√© √† xelatex pour la compatibilit√© Unicode
    if shutil.which("xelatex"):
        print(msg("‚úÖ Moteur XeLaTeX d√©tect√© (PDF optimal avec support Unicode)",
                  "‚úÖ XeLaTeX engine detected (optimal PDF with Unicode support)"))
        PDF_ENGINE = "xelatex"
    elif shutil.which("pdflatex") or shutil.which("lualatex"):
        print(msg("‚úÖ Syst√®me LaTeX d√©tect√© (PDF optimal)",
                  "‚úÖ LaTeX system detected (optimal PDF)"))
    else:
        print(msg("‚ö†Ô∏è  Aucun moteur LaTeX d√©tect√©, la qualit√© du PDF sera basique",
                  "‚ö†Ô∏è  No LaTeX engine detected, PDF quality will be basic"))
        print(msg("üëâ Pour un meilleur r√©sultat, installe TeX Live ou MikTeX",
                  "üëâ For best results, install TeX Live or MikTeX"))

def convert_to_ebook(input_file: str, make_pdf: bool, make_epub: bool, output_dir: str):
    if not os.path.isfile(input_file):
        print(msg(f"‚ùå Fichier introuvable : {input_file}",
                  f"‚ùå File not found: {input_file}"))
        return

    base_name = os.path.splitext(os.path.basename(input_file))[0]

    if not os.path.isdir(output_dir):
        os.makedirs(output_dir, exist_ok=True)

    try:
        if make_pdf:
            pdf_file = os.path.join(output_dir, f"{base_name}.pdf")
            extra_args = ['--standalone']
            if PDF_ENGINE:
                extra_args.append(f'--pdf-engine={PDF_ENGINE}')
            
            pypandoc.convert_file(input_file, 'pdf', outputfile=pdf_file, extra_args=extra_args)
            print(msg(f"‚úÖ PDF g√©n√©r√© : {pdf_file}",
                      f"‚úÖ PDF generated: {pdf_file}"))

        if make_epub:
            epub_file = os.path.join(output_dir, f"{base_name}.epub")
            pypandoc.convert_file(input_file, 'epub', outputfile=epub_file, extra_args=['--standalone'])
            print(msg(f"‚úÖ ePub g√©n√©r√© : {epub_file}",
                      f"‚úÖ ePub generated: {epub_file}"))

    except Exception as e:
        print(msg(f"‚ùå Erreur pendant la conversion de {input_file} : {e}",
                  f"‚ùå Error converting {input_file} : {e}"))

if __name__ == "__main__":
    if len(sys.argv) < 2:
        print(msg("Usage: convert2ebook.py [--pdf|--epub] [--output dossier] <fichier1.odt> [fichier2.odt] ...",
                  "Usage: convert2ebook.py [--pdf|--epub] [--output folder] <file1.odt> [file2.odt] ..."))
        sys.exit(1)

    make_pdf = True
    make_epub = True
    output_dir = os.getcwd()
    args = sys.argv[1:]

    if "--pdf" in args:
        make_pdf = True
        make_epub = False
        args.remove("--pdf")

    if "--epub" in args:
        make_pdf = False
        make_epub = True
        args.remove("--epub")

    if "--output" in args:
        idx = args.index("--output")
        if idx + 1 >= len(args):
            print(msg("‚ùå L'option --output n√©cessite un chemin",
                      "‚ùå --output option requires a folder path"))
            sys.exit(1)
        output_dir = args[idx + 1]
        args.pop(idx)
        args.pop(idx)

    if not args:
        print(msg("‚ùå Aucun fichier fourni", "‚ùå No files provided"))
        sys.exit(1)

    check_dependencies()

    for file in args:
        convert_to_ebook(file, make_pdf, make_epub, output_dir)
